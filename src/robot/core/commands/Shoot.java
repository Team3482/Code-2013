// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package robot.core.commands;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.*;
import robot.core.Robot;
import robot.core.RobotMap;
/**
 *
 */
public class  Shoot extends Command {
    private int shotsToFire;
    private int shotsFired = 0;
    public Shoot() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
	shotsToFire = 1;
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.shooter);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }
    public Shoot(int shots) {
        shotsToFire = shots;
    }
    // Called just before this Command runs the first time
    protected void initialize() {
    }
    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
        System.out.println("Spin up");
        Robot.shooter.spinUpShooter();
        while(shotsFired < shotsToFire) {
            System.out.println("Fire");
            Robot.shooter.pushFrisbee();
            shotsFired++;
        }
    }
    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        if(shotsFired >= shotsToFire || shotsToFire <= 0) {
            return true;
        } else {
            return false;
        }
    }
    // Called once after isFinished returns true
    protected void end() {
        System.out.println("Spin down");
        Robot.shooter.spinDownShooter();
    }
    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
        Robot.shooter.spinDownShooter();
    }
}
