// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package robot.core.commands;
import edu.wpi.first.wpilibj.command.Command;
import robot.core.Robot;
import edu.wpi.first.wpilibj.image.*;
import edu.wpi.first.wpilibj.camera.*;
import edu.wpi.first.wpilibj.PIDController;
import edu.wpi.first.wpilibj.PIDSource;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.Timer;
/**
 *
 */
public class  Aim extends Command {
    private final double KP = 0.0;
    private final double KI = 0.0;
    private final double KD = 0.0;
    private final double KF = 0.0;
    private PIDController pidCONTROL;
    private PIDSource pidSOURCE;
    private PIDOutput pidOUT;
    private ColorImage cameraImage = null;
    private double offset;
    
    
    public Aim() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
	
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.chassis);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }
    // Called just before this Command runs the first time
    protected void initialize() {
        try {
            // Wait until the camera is up
            while(!Robot.camera.isFreshImage()) {
                Timer.delay(0.1);
                continue;
            }
            Robot.camera.configureCamera();
            cameraImage = Robot.camera.getImage();
        } catch(Exception e) {
            System.out.println(e.getMessage());
        }
    }
    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
        try {
            cameraImage = Robot.camera.getImage();
            cameraImage = (Robot.camera.isFreshImage() || cameraImage == null) ? Robot.camera.getImage() : cameraImage;
            int[] topScores = Robot.camera.getTargets(Robot.camera.score(cameraImage));
            offset = Robot.camera.calculateOffset(topScores, 0);
            Robot.chassis.move(0.0, offset);
        } catch(Exception e) {
            System.out.println(e);
            e.printStackTrace();
        }
    }
    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }
    // Called once after isFinished returns true
    protected void end() {
        try {
            cameraImage.free();
        } catch(Exception e) {
            System.out.println(e);
            e.printStackTrace();
        }
    }
    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
