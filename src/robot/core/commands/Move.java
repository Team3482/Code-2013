// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.


package robot.core.commands;

import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command;
import robot.core.Robot;

/**
 *
 */
public class  Move extends Command {
    private double forward, turn, time;
    private boolean finished = false;
    public Move() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
	
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.shooter);
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        forward = 0.0;
        turn    = 0.0;
        time    = 0.0;
    }
    public Move(double forward, double turn, double time) {
        requires(Robot.shooter);
        this.forward = forward;
        this.turn = turn;
        this.time = time;
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
        Robot.chassis.setSafety(false);
        Robot.chassis.move(forward, turn);
        Timer.delay(time);
        Robot.chassis.move(0.0, 0.0);
        Robot.chassis.setSafety(true);
        finished = true;
    }
    
    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return finished;
    }

    // Called once after isFinished returns true
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
