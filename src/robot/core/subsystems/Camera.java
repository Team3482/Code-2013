// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.

package robot.core.subsystems;

import edu.wpi.first.wpilibj.camera.AxisCamera;
import edu.wpi.first.wpilibj.camera.AxisCamera.*;
import edu.wpi.first.wpilibj.camera.AxisCameraException;
//import robot.core.commands.*;
import edu.wpi.first.wpilibj.image.*;
import edu.wpi.first.wpilibj.command.Subsystem;

/**
 * The Camera subsystem provides vision processing functionality
 * for the Axis Camera
 */

public class Camera extends Subsystem {
    
    // Camera setting constants
    static final int       BRIGHTNESS       = ;
    static final int       COLOR_LEVEL      = ;
    static final int       COMPRESSION      = 30;
    static final ExposureT EXPOSURE_CONTROL = ExposureT.flickerfree60;
    static final EXPOSURE_PRIORITY = ;
    static final MAX_FPS = ;
    static final RESOLUTION = ;
    static final ROTATION = ;
    static final WHITE_BALANCE = ;
    
    // TODO: find constants for *our* ring light
    // Pixel filtering constants for the green ring light in the sample images(HSV)
    static final int HUE_LOW         = 96;
    static final int HUE_HIGH        = 114;
    static final int SATURATION_LOW  = 148;
    static final int SATURATION_HIGH = 255;
    static final int VALUE_LOW       = 84;
    static final int VALUE_HIGH      = 162;
    
    static CriteriaCollection cc = new CriteriaCollection();
    
    // Aspect ratio ranges
    static final float   ASPECT_RATIO_LOW  = 0;
    static final float   ASPECT_RATIO_HIGH = 2;
    static final boolean OUTSIDE_RANGE     = false;
    
    public class Scores {
        double rectangularity;
        double aspectRatioInner;
        double aspectRatioOuter;
        double xEdge;
        double yEdge;
    }
    
    public void initDefaultCommand() {
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    
    public static void calculate(ColorImage img) throws NIVisionException {
        // TODO: Add waits before looping again (preferably until a new image is available)

        // Adds particle area to the CriteriaCollection object for calculating rectangularity score
        cc.addCriteria(NIVision.MeasurementType.IMAQ_MT_AREA, aspectRatioHigh,
                aspectRatioLow, outsideRange);
        boolean connectivity8 = false;
        BinaryImage threshold, convexHull, filtered;
        
        threshold = img.thresholdHSV(hueLow, hueHigh, saturationLow,
            saturationHigh, valueLow, valueHigh);
        convexHull = threshold.convexHull(connectivity8);
        
        //ParticleAnalysisReport[] reports = bin.getOrderedParticleAnalysisReports();
   }

    public static boolean freshImage() {
        return AxisCamera.getInstance().freshImage();
    }
    public static ColorImage getImage() throws AxisCameraException, NIVisionException {
        return AxisCamera.getInstance().getImage();
    }
    
    // Method to configure camera settings
    public static void configureCamera() {
        AxisCamera c = AxisCamera.getInstance();
        c.writeBrightness(BRIGHTNESS);
        c.writeColorLevel(COLOR_LEVEL);
        c.writeCompression(COMPRESSION);
        c.writeExposureControl(EXPOSURE_CONTROL);
        c.writeExposurePriority(EXPOSURE_PRIORITY);
        c.writeMaxFPS(MAX_FPS);
        c.writeResolution(RESOLUTION);
        c.writeRotation(ROTATION);
        c.writeWhiteBalance(WHITE_BALANCE);
    }
}
