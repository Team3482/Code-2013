// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package robot.core.subsystems;
import edu.wpi.first.wpilibj.camera.AxisCamera;
import edu.wpi.first.wpilibj.camera.AxisCamera.*;
import edu.wpi.first.wpilibj.image.*;
import robot.core.commands.*;
import edu.wpi.first.wpilibj.command.Subsystem;

/**
 * The Camera subsystem provides vision processing functionality
 * for the Axis Camera
 */

public class Camera extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    // Vision processing constants
    static final int hueLow         = 0;
    static final int hueHigh        = 0;
    static final int saturationLow  = 0;
    static final int saturationHigh = 0;
    static final int valueLow       = 0;
    static final int valueHigh      = 0;
    
    public class Scores {
        double rectangularity;
        double aspectRatioInner;
        double aspectRatioOuter;
        double xEdge;
        double yEdge;
    }
    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    
    public static void calculate(ColorImage img) {
        // TODO: Add waits before looping again.
        // Filters image according to threshold constants
        try {
            boolean connectivity8 = false;
            BinaryImage bin;
            bin = img.thresholdHSV(hueLow, hueHigh, saturationLow,
                    saturationHigh, valueLow, valueHigh).convexHull(connectivity8);
        } catch(Exception e) {
            System.out.println("IMAGE NOT VALID. GIMME VALID IMAGES.");
            System.out.println(e.getMessage());
        }
   }
    // Methods for checking camera status
    public static boolean hasFreshImage() {
        return AxisCamera.getInstance().freshImage();
    }
    
    // Methods to configure camera settings
    public static void setBrightness(int brightness){
        AxisCamera.getInstance().writeBrightness(brightness);
    }
    public static void setColorLevel(int value) {
        AxisCamera.getInstance().writeColorLevel(value);
    }
    public static void setCompression(int value) {
        AxisCamera.getInstance().writeCompression(value);
    }
    public static void setExposureMode(ExposureT value) {
        AxisCamera.getInstance().writeExposureControl(value);
    }
    public static void setExposurePriority(ExposurePriorityT value) {
        AxisCamera.getInstance().writeExposurePriority(value);
    }
    public static void setFPS(int FPS) {
        AxisCamera.getInstance().writeMaxFPS(FPS);
    }
    public static void setSize(ResolutionT resolution) {
        AxisCamera.getInstance().writeResolution(resolution);
    }
    public static void setRotation(RotationT value) {
        AxisCamera.getInstance().writeRotation(value);
    }
    public static void setWhiteBalance(WhiteBalanceT whiteBalance) {
        AxisCamera.getInstance().writeWhiteBalance(whiteBalance);
    }
}
