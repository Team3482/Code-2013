// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.


package robot.core;
    
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // Declarations
    public static SpeedController chassisLeftFront;
    public static SpeedController chassisLeftRear;
    public static SpeedController chassisRightFront;
    public static SpeedController chassisRightRear;
    public static RobotDrive chassisRobotDrive;
    public static SpeedController shooterCam;
    public static SpeedController shooterWheel1;
    public static SpeedController shooterWheel2;
    public static Compressor compressor;
    public static DoubleSolenoid cylinder;

    public static void init() {
        // Constructors
        //     Driving
        /* arguments: (PWM_channel) */
        chassisLeftFront = new Victor(1);
	LiveWindow.addActuator("Chassis", "LeftFront", (Victor) chassisLeftFront);
        
        chassisLeftRear = new Victor(2);
	LiveWindow.addActuator("Chassis", "LeftRear", (Victor) chassisLeftRear);
        
        chassisRightFront = new Victor(3);
	LiveWindow.addActuator("Chassis", "RightFront", (Victor) chassisRightFront);
        
        chassisRightRear = new Victor(4);
	LiveWindow.addActuator("Chassis", "RightRear", (Victor) chassisRightRear);
        
        chassisRobotDrive = new RobotDrive(chassisLeftFront, chassisLeftRear,
              chassisRightFront, chassisRightRear);
        // TODO: set this to true before testing on the actual robot
        chassisRobotDrive.setSafetyEnabled(false);
        chassisRobotDrive.setExpiration(0.1);
        chassisRobotDrive.setSensitivity(0.5);
        chassisRobotDrive.setMaxOutput(1.0);

        //     Shooter
        shooterCam = new Talon(5); //PWM pin 5
	LiveWindow.addActuator("Shooter", "Cam", (Talon) shooterCam);
        
        shooterWheel1 = new Talon(7);
	LiveWindow.addActuator("Shooter", "Wheel1", (Talon) shooterWheel1);
        shooterWheel2 = new Talon(8);
        LiveWindow.addActuator("Shooter", "Wheel2", (Talon) shooterWheel2);
        
        //     Compressor
        /* arguments: (pressureSwitchChannel, compressorRelayChannel) */
        compressor = new Compressor(1,1);
        
        //     Solenoid Cylinder Controllers
        /* arguments: (forwardChannel, reverseChannel) */
        cylinder = new DoubleSolenoid(1,2);
        
    }
}
