// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.


package robot.core;
    
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.CounterBase.EncodingType; import edu.wpi.first.wpilibj.Encoder.PIDSourceParameter;

import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import java.util.Vector;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController chassisleftFront;
    public static SpeedController chassisleftRear;
    public static SpeedController chassisrightFront;
    public static SpeedController chassisrightRear;
    public static RobotDrive chassisRobotDrive;
    public static SpeedController climberarm;
    public static SpeedController climberclamp;
    public static SpeedController climberwinch;
    public static Encoder shooterencoder;
    public static SpeedController shootercontroller;
    public static DigitalInput feederlimSwitch;
    public static SpeedController feederpiston;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        chassisleftFront = new Victor(1, 1);
	LiveWindow.addActuator("Chassis", "leftFront", (Victor) chassisleftFront);
        
        chassisleftRear = new Victor(1, 2);
	LiveWindow.addActuator("Chassis", "leftRear", (Victor) chassisleftRear);
        
        chassisrightFront = new Victor(1, 3);
	LiveWindow.addActuator("Chassis", "rightFront", (Victor) chassisrightFront);
        
        chassisrightRear = new Victor(1, 4);
	LiveWindow.addActuator("Chassis", "rightRear", (Victor) chassisrightRear);
        
        chassisRobotDrive = new RobotDrive(chassisleftFront, chassisleftRear,
              chassisrightFront, chassisrightRear);
	
        chassisRobotDrive.setSafetyEnabled(true);
        chassisRobotDrive.setExpiration(0.1);
        chassisRobotDrive.setSensitivity(0.5);
        chassisRobotDrive.setMaxOutput(1.0);

        climberarm = new Victor(1, 5);
	LiveWindow.addActuator("Climber", "arm", (Victor) climberarm);
        
        climberclamp = new Victor(1, 6);
	LiveWindow.addActuator("Climber", "clamp", (Victor) climberclamp);
        
        climberwinch = new Victor(1, 7);
	LiveWindow.addActuator("Climber", "winch", (Victor) climberwinch);
        
        shooterencoder = new Encoder(1, 4, 1, 5, false, EncodingType.k4X);
	LiveWindow.addSensor("Shooter", "encoder", shooterencoder);
        shooterencoder.setDistancePerPulse(1.0);
        shooterencoder.setPIDSourceParameter(PIDSourceParameter.kRate);
        shooterencoder.start();
        shootercontroller = new Victor(1, 9);
	LiveWindow.addActuator("Shooter", "controller", (Victor) shootercontroller);
        
        feederlimSwitch = new DigitalInput(1, 3);
	LiveWindow.addSensor("Feeder", "limSwitch", feederlimSwitch);
        
        feederpiston = new Victor(1, 8);
	LiveWindow.addActuator("Feeder", "piston", (Victor) feederpiston);
        
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
