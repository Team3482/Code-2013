 // RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package robot.core;
    
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.CounterBase.EncodingType; import edu.wpi.first.wpilibj.Encoder.PIDSourceParameter;
import edu.wpi.first.wpilibj.camera.AxisCamera;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import java.util.Vector;
/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController chassisLeftFront;
    public static SpeedController chassisLeftRear;
    public static SpeedController chassisRightFront;
    public static SpeedController chassisRightRear;
    public static RobotDrive chassisRobotDrive;
    public static SpeedController climberArm;
    public static SpeedController climberClamp;
    public static SpeedController climberWinch;
    public static Encoder shooterEncoder;
    public static SpeedController shooterController;
    public static DigitalInput feederLimSwitch;
    public static SpeedController feederPiston;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        chassisLeftFront = new Victor(1, 1);
	LiveWindow.addActuator("Chassis", "LeftFront", (Victor) chassisLeftFront);
        
        chassisLeftRear = new Victor(1, 2);
	LiveWindow.addActuator("Chassis", "LeftRear", (Victor) chassisLeftRear);
        
        chassisRightFront = new Victor(1, 3);
	LiveWindow.addActuator("Chassis", "RightFront", (Victor) chassisRightFront);
        
        chassisRightRear = new Victor(1, 4);
	LiveWindow.addActuator("Chassis", "RightRear", (Victor) chassisRightRear);
        
        chassisRobotDrive = new RobotDrive(chassisLeftFront, chassisLeftRear,
              chassisRightFront, chassisRightRear);
	
        chassisRobotDrive.setSafetyEnabled(true);
        chassisRobotDrive.setExpiration(0.1);
        chassisRobotDrive.setSensitivity(0.5);
        chassisRobotDrive.setMaxOutput(1.0);
        climberArm = new Victor(1, 5);
	LiveWindow.addActuator("Climber", "Arm", (Victor) climberArm);
        
        climberClamp = new Victor(1, 6);
	LiveWindow.addActuator("Climber", "Clamp", (Victor) climberClamp);
        
        climberWinch = new Victor(1, 7);
	LiveWindow.addActuator("Climber", "Winch", (Victor) climberWinch);
        
        shooterEncoder = new Encoder(1, 4, 1, 5, false, EncodingType.k4X);
	LiveWindow.addSensor("Shooter", "Encoder", shooterEncoder);
        shooterEncoder.setDistancePerPulse(1.0);
        shooterEncoder.setPIDSourceParameter(PIDSourceParameter.kRate);
        shooterEncoder.start();
        shooterController = new Victor(1, 9);
	LiveWindow.addActuator("Shooter", "Controller", (Victor) shooterController);
        
        feederLimSwitch = new DigitalInput(1, 3);
	LiveWindow.addSensor("Feeder", "LimSwitch", feederLimSwitch);
        
        feederPiston = new Victor(1, 8);
	LiveWindow.addActuator("Feeder", "Piston", (Victor) feederPiston);
        
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
